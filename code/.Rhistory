verboseIter = FALSE)
# simplest model
set.seed(8)
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs2 <-  ols_model2$finalModel$coefficients
ols_model_coeffs2 <-  ols_model2$finalModel$coefficients
ols_model_coeffs_df2 <- data.frame(
"variable" = names(ols_model_coeffs2),
"ols_coefficient" = ols_model_coeffs2
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables plus interactions
set.seed(8)
system.time({
ols_model3 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model3 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs3 <-  ols_model3$finalModel$coefficients
ols_model_coeffs_df3 <- data.frame(
"variable" = names(ols_model_coeffs3),
"ols_coefficient" = ols_model_coeffs3
) %>%
mutate(variable = gsub("`","",variable))
X_for_ols <- c('f_property_type * d_profile_pic', 'f_property_type * d_wifi','f_property_type * d_microwave', 'f_property_type * d_baby', 'f_property_type * d_stove', 'f_property_type * paid_parking')
X_for_lasso  <- c('f_property_type * d_superhost','f_property_type * d_identity_verified','f_property_type * d_profile_pic','f_property_type * d_air_conditioning','f_property_type * d_free_parking','f_property_type * d_refrigerator','f_property_type * d_tv', 'f_property_type * d_instant_bookable', paste0("(f_property_type) * (",paste(amenities, collapse=" + "),")"))
# transformed numeric variables, no interactions
set.seed(8)
system.time({
lasso_model1 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid =  expand.grid("alpha" = 1, "lambda" = seq(0.01, 1, by = 0.05)),
trControl = train_control
)
})
system.time({
lasso_model1 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid =  expand.grid("alpha" = 1, "lambda" = seq(0.01, 1, by = 0.05)),
trControl = train_control
)
})
print(lasso_model1$bestTune$lambda)
lasso_coeffs1 <- coef(
lasso_model1$finalModel,
lasso_model1$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `s1`)
lasso_coeffs_non_null1 <- lasso_coeffs1[!lasso_coeffs1$lasso_coefficient == 0,]
print(nrow(lasso_coeffs_non_null1))
lasso_coeffs1 <- coef(
lasso_model1$finalModel,
lasso_model1$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `s1`)
lasso_coeffs_non_null1 <- lasso_coeffs1[!lasso_coeffs1$lasso_coefficient == 0,]
print(nrow(lasso_coeffs_non_null1))
# transformed numeric variables plus interactions
set.seed(8)
system.time({
lasso_model2 <- train(
formula(paste0("price ~", paste0(predictors_5, collapse = " + "))),
data = df_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid =  expand.grid("alpha" = 1, "lambda" = seq(0.01, 1, by = 0.05)),
trControl = train_control
)
})
system.time({
lasso_model2 <- train(
formula(paste0("price ~", paste0(predictors_5, collapse = " + "))),
data = df_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid =  expand.grid("alpha" = 1, "lambda" = seq(0.01, 1, by = 0.05)),
trControl = train_control
)
})
print(lasso_model2$bestTune$lambda)
lasso_coeffs2 <- coef(
lasso_model2$finalModel,
lasso_model2$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `s1`)
lasso_coeffs_non_null2 <- lasso_coeffs2[!lasso_coeffs2$lasso_coefficient == 0,]
print(nrow(lasso_coeffs_non_null2))
regression_coeffs <- merge(ols_model_coeffs_df3, lasso_coeffs_non_null2, by = "variable", all=TRUE)
names(regression_coeffs) <- c('Variable', 'OLS 3', 'LASSO 2')
temp_models <-
list("OLS 1" = ols_model1,
"OLS 2" = ols_model2,
"OLS 3" = ols_model3,
"LASSO 1 (few interactions)" = lasso_model1,
"LASSO 2 (all interactions)" = lasso_model2)
result_temp <- resamples(temp_models) %>% summary()
# get test RMSE
result_rmse <- imap(temp_models, ~{
mean(result_temp$values[[paste0(.y,"~RMSE")]])
}) %>% unlist() %>% as.data.frame() %>%
rename("CV RMSE" = ".")
# get holdout RMSE
result_holdout <- map(temp_models, ~{
RMSE(predict(.x, newdata = df_holdout), df_holdout[["price"]])
}) %>% unlist() %>% as.data.frame() %>%
rename("Holdout RMSE" = ".")
# merge the two
result_combined <- cbind(result_rmse, result_holdout )
# calculate number of variables in each model
num_coefs <-  c(
length(ols_model1$coefnames),
length(ols_model2$coefnames),
length(ols_model3$coefnames),
nrow(lasso_coeffs_non_null1),
nrow(lasso_coeffs_non_null2))
ncoefs <- as.data.frame(num_coefs, row.names = rownames(result_combined)
) %>% rename("Number of Coefficients" = "num_coefs")
# merge the three
result_combined <- cbind(ncoefs, result_rmse, result_holdout )
# print table
knitr::kable( result_combined, caption = "OLS and LASSO performance", digits = 2 ) %>% kable_styling( position = "center", latex_options = 'hold_position' )
# fitted vs actual values for LASSO 2
# target variable
Ylev <- df_holdout[["price"]]
# get predicted values
predictionlev_holdout_pred <- as.data.frame(predict(lasso_model2, newdata = df_holdout))
# rename column
names(predictionlev_holdout_pred) <- "fit"
# Create data frame with the real and predicted values
d <- data.frame(ylev=Ylev, predlev=predictionlev_holdout_pred[,"fit"] )
# Check the differences
d$elev <- d$ylev - d$predlev
# Plot predicted vs price
level_vs_pred <- ggplot(data = d) +
geom_point(aes(y=ylev, x=predlev),  size = 1,
shape = 16, alpha = 0.7, show.legend=FALSE, na.rm=TRUE, color = colours[2]) +
geom_segment(aes(x = 0, y = 0, xend = 800, yend =900), size=1, linetype=2, color = colours[1]) +
coord_cartesian(xlim = c(0, 800), ylim = c(0, 900)) +
labs(y = "Price", x = "Predicted price", title = "Actual vs fitted values for the LASSO 2 model") +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
# Plot predicted vs price
level_vs_pred <- ggplot(data = d) +
geom_point(aes(y=ylev, x=predlev),  size = 1,
shape = 16, alpha = 0.7, show.legend=FALSE, na.rm=TRUE, color = "cyan") +
geom_segment(aes(x = 0, y = 0, xend = 800, yend =900), size=1, linetype=2, color = colours[1]) +
coord_cartesian(xlim = c(0, 800), ylim = c(0, 900)) +
labs(y = "Price", x = "Predicted price", title = "Actual vs fitted values for the LASSO 2 model") +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
# Plot predicted vs price
level_vs_pred <- ggplot(data = d) +
geom_point(aes(y=ylev, x=predlev),  size = 1,
shape = 16, alpha = 0.7, show.legend=FALSE, na.rm=TRUE, color = "blue") +
geom_segment(aes(x = 0, y = 0, xend = 800, yend =900), size=1, linetype=2, color = "cyan") +
coord_cartesian(xlim = c(0, 800), ylim = c(0, 900)) +
labs(y = "Price", x = "Predicted price", title = "Actual vs fitted values for the LASSO 2 model") +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
level_vs_pred
max(d$ylev)
max(d$predlev)
# Plot predicted vs price
level_vs_pred <- ggplot(data = d) +
geom_point(aes(y=ylev, x=predlev),  size = 1,
shape = 16, alpha = 0.7, show.legend=FALSE, na.rm=TRUE, color = "blue") +
geom_segment(aes(x = 0, y = 0, xend = 1300, yend =1100), size=1, linetype=2, color = "cyan") +
coord_cartesian(xlim = c(0, 1100), ylim = c(0, 1300)) +
labs(y = "Price", x = "Predicted price", title = "Actual vs fitted values for the LASSO 2 model") +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
level_vs_pred
# Check the differences
d$elev <- d$ylev - d$predlev
# Plot predicted vs price
level_vs_pred <- ggplot(data = d) +
geom_point(aes(y=ylev, x=predlev),  size = 1,
shape = 16, alpha = 0.7, show.legend=FALSE, na.rm=TRUE, color = "blue") +
geom_segment(aes(x = 0, y = 0, xend = 1300, yend =1100), size=1, linetype=2, color = "cyan") +
coord_cartesian(xlim = c(0, 1100), ylim = c(0, 1300)) +
labs(y = "Price", x = "Predicted price", title = "Actual vs fitted values for the LASSO 2 model") +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
level_vs_pred
# Plot predicted vs price
level_vs_pred <- ggplot(data = d) +
geom_point(aes(y=ylev, x=predlev),  size = 1,
shape = 16, alpha = 0.7, show.legend=FALSE, na.rm=TRUE, color = "blue") +
geom_segment(aes(x = 0, y = 0, xend = 1300, yend =1100), size=1, linetype=2, color = "red") +
coord_cartesian(xlim = c(0, 1100), ylim = c(0, 1300)) +
labs(y = "Price", x = "Predicted price", title = "Actual vs fitted values for the LASSO 2 model") +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
level_vs_pred
# simpler model
tune_grid <- expand.grid(
.mtry = c(6, 8, 10),
.splitrule = "variance",
.min.node.size = c(5, 10)
)
set.seed(8)
system.time({
rf_model_1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "ranger",
trControl = train_control,
tuneGrid = tune_grid,
importance = "impurity"
)
})
# more complex model
tune_grid <- expand.grid(
.mtry = c(8, 10, 12),
.splitrule = "variance",
.min.node.size = c(5, 10, 15)
)
set.seed(8)
system.time({
rf_model_2 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "ranger",
trControl = train_control,
tuneGrid = tune_grid,
importance = "impurity"
)
})
# tuning parameter choice 1
result_1 <- matrix(c(
rf_model_1$finalModel$mtry,
rf_model_2$finalModel$mtry,
rf_model_1$finalModel$min.node.size,
rf_model_2$finalModel$min.node.size
),
nrow=2, ncol=2,
dimnames = list(c("Random forest 1", "Random forest 2"),
c("Min. number of variables","Min. node size"))
)
# print table
knitr::kable( result_1, caption = "Best hyperparameter sets for random forest models", digits = 2 ) %>% kable_styling( position = "center", latex_options = 'hold_position' )
# save results
results <- resamples(
list(
model_1  = rf_model_1,
model_2  = rf_model_2
))
# summary table on model 2 for different hyperparameters
rf_tuning_model2 <- rf_model_2$results %>%
dplyr::select(mtry, min.node.size, RMSE) %>%
dplyr::rename(Nodes = min.node.size) %>%
spread(key = mtry, value = RMSE)
# print table
knitr::kable( rf_tuning_model2, caption = "Different hyperparameter sets Random forest 2", digits = 2 ) %>% kable_styling( position = "center", latex_options = 'hold_position' )
# RMSE of models
result_2 <- matrix(c(mean(results$values$`model_1~RMSE`),
mean(results$values$`model_2~RMSE`)
),
nrow=2, ncol=1,
dimnames = list(c("Random forest 1", "Random forest 2"),
c(results$metrics[2]))
)
names(result_2) <- "CV RMSE"
# print table
knitr::kable( result_2, caption = "Performance of random forest models", digits = 2 ) %>% kable_styling( position = "center", latex_options = 'hold_position')
# variable importance plot for random forest 2
rf_model_2_var_imp <- importance(rf_model_2$finalModel)/1000
rf_model_2_var_imp_df <-
data.frame(varname = names(rf_model_2_var_imp),imp = rf_model_2_var_imp) %>%
mutate(varname = gsub("f_neighbourhood", "Neighbourhood:", varname) ) %>%
mutate(varname = gsub("f_room_type", "Room type:", varname) ) %>%
arrange(desc(imp)) %>%
mutate(imp_percentage = imp/sum(imp))
rf_model_2_var_imp_plot_b <- ggplot(rf_model_2_var_imp_df[1:10,], aes(x=reorder(varname, imp), y=imp_percentage)) +
geom_point(color=colours[1], size=1) +
geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color=colours[1], size=1) +
ylab("Importance") +
xlab("Variable Name") +
labs( title= "Variable importance for Random forest 2 (top 10 variables)") +
coord_flip() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_2_var_imp_plot_b <- ggplot(rf_model_2_var_imp_df[1:10,], aes(x=reorder(varname, imp), y=imp_percentage)) +
geom_point(color=colours[1], size=1) +
geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color="cyan", size=1) +
ylab("Importance") +
xlab("Variable Name") +
labs( title= "Variable importance for Random forest 2 (top 10 variables)") +
coord_flip() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_2_var_imp_plot_b <- ggplot(rf_model_2_var_imp_df[1:10,], aes(x=reorder(varname, imp), y=imp_percentage)) +
geom_point(color="red", size=1) +
geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color="cyan", size=1) +
ylab("Importance") +
xlab("Variable Name") +
labs( title= "Variable importance for Random forest 2 (top 10 variables)") +
coord_flip() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_2_var_imp_plot_b
rf_model_2_var_imp_plot_b <- ggplot(rf_model_2_var_imp_df[1:10,], aes(x=reorder(varname, imp), y=imp_percentage)) +
geom_point(color="red", size=1) +
geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color="blue", size=1) +
ylab("Importance") +
xlab("Variable Name") +
labs( title= "Variable importance for Random forest 2 (top 10 variables)") +
coord_flip() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_2_var_imp_plot_b
# grouped variable importance
amenities <- c( "d_wifi1", "d_tv1", "d_refrigerator1", "d_air_conditioning1", "d_microwave1", "d_baby1", "d_stove1", "d_free_parking1", "d_paid_parking1" )
rf_model_var_imp_df <- rf_model_2_var_imp_df %>% mutate(
group2 = ifelse(varname %in% amenities, 'amenities',
ifelse(varname %in% basic_vars, 'basic variables',
ifelse(varname %in% reviews, 'reviews', 'host info'))))
rf_model_var_imp_grouped2 <- rf_model_var_imp_df %>%  group_by(group2) %>% summarise(group_imp_sum = sum(imp_percentage)) %>%  arrange(desc(group_imp_sum))
rf_model_var_imp_grouped2_plot <-
ggplot(rf_model_var_imp_grouped2, aes(x=reorder(group2, group_imp_sum), y=group_imp_sum)) +
geom_point(color=colours[2], size=1) +
geom_segment(aes(x=group2,xend=group2,y=0,yend=group_imp_sum), color=colours[2], size=1) +
ylab("Importance") +   xlab("Variable Name") +
coord_flip() +
# expand=c(0,0),
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
labs( title='Grouped variable importance plot for Random Forest 2') +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_var_imp_grouped2_plot <-
ggplot(rf_model_var_imp_grouped2, aes(x=reorder(group2, group_imp_sum), y=group_imp_sum)) +
geom_point(color="blue", size=1) +
geom_segment(aes(x=group2,xend=group2,y=0,yend=group_imp_sum), color="red", size=1) +
ylab("Importance") +   xlab("Variable Name") +
coord_flip() +
# expand=c(0,0),
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
labs( title='Grouped variable importance plot for Random Forest 2') +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_var_imp_grouped2_plot
rf_model_var_imp_grouped2_plot <-
ggplot(rf_model_var_imp_grouped2, aes(x=reorder(group2, group_imp_sum), y=group_imp_sum)) +
geom_point(color="red", size=1) +
geom_segment(aes(x=group2,xend=group2,y=0,yend=group_imp_sum), color="blue", size=1) +
ylab("Importance") +   xlab("Variable Name") +
coord_flip() +
# expand=c(0,0),
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
labs( title='Grouped variable importance plot for Random Forest 2') +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
rf_model_var_imp_grouped2_plot
# partial dependence plot for n_accommodates
pdp_n_acc <- pdp::partial(rf_model_2, pred.var = "n_accommodates", pred.grid = distinct_(df_holdout, "n_accommodates"), train = df_train)
pdp_n_acc_plot <- pdp_n_acc %>%
autoplot( ) +
geom_point( color = colours[3],size=2) +
geom_line( color = colours[3],size=1) +
ylab("Predicted price") +
xlab("Accommodates (people)") +
labs(title="Partial dependence plot for number of accommodated people") +
scale_x_continuous(limit=c(2,6), breaks=seq(1,7,1)) +
theme_bw() +
theme( panel.grid.minor.x = element_blank(),
plot.title = element_text( size = 12, face = "bold", hjust = 0.5 ) )
# Model selection ---------------------------------------------------------
final_models <-
list("OLS 3" = ols_model3,
"LASSO (all interactions)" = lasso_model2,
"Random forest 2" = rf_model_2)
results <- resamples(final_models) %>% summary()
# evaluate final models on holdout set
final_rmse <- imap(final_models, ~{
mean(results$values[[paste0(.y,"~RMSE")]])
}) %>% unlist() %>% as.data.frame() %>%
rename("CV RMSE" = ".")
final_holdout <- map(final_models, ~{
RMSE(predict(.x, newdata = df_holdout), df_holdout[["price"]])
}) %>% unlist() %>% as.data.frame() %>%
rename("Holdout RMSE" = ".")
final_combined <- cbind(final_rmse, final_holdout)
# print table
knitr::kable( final_combined, caption = "Model performance comparison", digits = 2 ) %>% kable_styling( position = "center", latex_options = 'hold_position')
# Evaluate model on subsamples -----------------------------------------------
data_holdout_w_prediction <- df_holdout %>%
mutate(predicted_price = predict(rf_model_2, newdata = df_holdout))
# create summary table
a <- data_holdout_w_prediction %>%
mutate(is_low_size = ifelse(n_accommodates <= 3, "small apartment", "mid-sized apatment")) %>%
group_by(is_low_size) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
b <- data_holdout_w_prediction %>%
mutate(microwave = ifelse(d_microwave == 1, "yes", "no")) %>%
group_by(microwave) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
c <- data_holdout_w_prediction %>%
filter(f_property_type %in% c("rental unit", "serviced_apartment")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
d <- data_holdout_w_prediction %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
# Save output
colnames(a) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("Beach in proximity", "", "", "")
result_3 <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
names(result_3) <- c("", "RMSE", "Mean price", "RMSE/price")
options(knitr.kable.NA = '')
knitr::kable( result_3, caption = "Stability of the random forest model", digits = 2 ) %>% kable_styling( position = "center", latex_options = 'hold_position')
