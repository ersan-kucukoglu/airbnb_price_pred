panel.border=element_blank(),
axis.line=element_line(),
legend.position = "top",
#legend.position = c(0.7, 0.9),
legend.box = "vertical",
legend.text = element_text(size = 5),
legend.title = element_text(size = 5, face = "bold"),
legend.key.size = unit(x = 0.4, units = "cm")
)
}
# check for interactions --------------------------------------------------
# check property type interactions
p1 <- price_diff_by_variables2(data, "f_property_type", "d_superhost", "Property Type", "Superhost")
p2 <- price_diff_by_variables2(data, "f_property_type", "d_profile_pic", "Property Type", "Profile Picture") # use this
p3 <- price_diff_by_variables2(data, "f_property_type", "d_identity_verified", "Property Type", "Identity Verified")
p4 <- price_diff_by_variables2(data, "f_property_type", "d_instant_bookable" , "Property Type", "Instant Bookable") # use this
p5 <- price_diff_by_variables2(data, "f_property_type", "d_wifi" , "Property Type", "Wifi") # use this
p6 <- price_diff_by_variables2(data, "f_property_type", "d_tv" , "Property Type", "Tv") # use this
p7 <- price_diff_by_variables2(data, "f_property_type", "d_refrigerator", "Property Type", "Refrigerator") # use this
p8 <- price_diff_by_variables2(data, "f_property_type", "d_air_conditioning" , "Property Type", "Air Conditioning")
p9 <- price_diff_by_variables2(data, "f_property_type", "d_microwave", "Property Type", "Microwave")
p10 <- price_diff_by_variables2(data, "f_property_type", "d_baby", "Property Type", "Baby Friendly") # use this
p11 <- price_diff_by_variables2(data, "f_property_type", "d_stove", "Property Type", "Stove") # use this
p12 <- price_diff_by_variables2(data, "f_property_type", "d_free_parking", "Property Type", "Free Parking")
p13 <- price_diff_by_variables2(data, "f_property_type", "d_paid_parking", "Property Type", "Paid Parking") #use this
sum_interactions <- plot_grid(p2, p4, p5, p6, p7, p10, p11, p12, p14, nrow=3, ncol=3)
sum_interactions
# preparation for modeling ------------------------------------------------
# group variables
target_var <- 'price'
basic_vars <- c('f_property_type', 'f_neighbourhood', 'n_accommodates', 'n_bedrooms', 'n_beds', 'd_instant_bookable', 'n_bathrooms')
host_vars <- c( 'n_host_response_rate', 'flag_host_response_rate','n_host_acceptance_rate', 'flag_host_acceptance_rate', 'd_superhost', 'd_profile_pic', 'd_identity_verified', 'n_host_total_listings_count')
reviews <- c(  'n_number_of_reviews', 'flag_number_of_reviews', 'n_days_since_rv', 'flag_days_since_rv', 'n_review_scores_rating', 'flag_review_scores_rating','n_reviews_per_month', 'flag_reviews_per_month')
amenities <- c('d_wifi', 'd_tv', 'd_refrigerator', 'd_air_conditioning', 'd_microwave', 'd_baby', 'd_stove', 'd_free_parking', 'd_paid_parking')
transformed_vars <- c( 'n_beds2', 'ln_bathrooms', 'ln_number_of_reviews', 'n_days_since_rv2', 'n_host_acceptance_rate2', 'n_host_response_rate2', 'ln_host_total_listings_count', 'n_bedrooms2')
X_for_ols <- c('f_property_type * d_profile_pic', 'f_property_type * d_instant_bookable', 'f_property_type * d_wifi', 'f_property_type * d_tv', 'f_property_type * d_refrigerator', 'f_property_type * d_baby', 'f_property_type * d_microwave', 'f_property_type * d_stove', 'f_property_type * d_paid_parking')
X_for_lasso  <- c('f_property_type * d_profile_pic', 'f_property_type * d_identity_verified', 'f_property_type * d_superhost', 'f_property_type * d_instant_bookable', paste0("(f_property_type) * (",                                                                                                                                                                              paste(amenities, collapse=" + "),")"))
# group predictors for models
predictors_1 <- c(basic_vars)
predictors_2 <- c(basic_vars, host_vars, reviews, amenities)
predictors_3 <- c(basic_vars[1:6], host_vars[1:9], reviews[2:8], amenities, transformed_vars)
predictors_4 <- c(predictors_3, X_for_ols)
predictors_5 <- c(predictors_3, X_for_lasso)
# create holdout set
set.seed(890)
train_indices <- as.integer(createDataPartition(data$price, p = 0.8, list = FALSE))
df_train <- data[train_indices, ]
df_holdout <- data[-train_indices, ]
# set the number of folds for cross-validation
train_control <- trainControl(method = "cv",
number = 5,
verboseIter = FALSE)
# simplest model
set.seed(8)
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model1 <- train(
formula(paste0("price ~", paste0(c(basic_vars, host_vars, reviews, amenities), collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model3 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
set.seed(8)
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs2 <-  ols_model2$finalModel$coefficients
ols_model_coeffs_df2 <- data.frame(
"variable" = names(ols_model_coeffs2),
"ols_coefficient" = ols_model_coeffs2
) %>%
mutate(variable = gsub("`","",variable))
# boxplot of price by property type
ggplot(data = df, aes(x = f_property_type, y = price)) +
stat_boxplot(aes(group = f_property_type), geom = "errorbar", width = 0.3, size = 0.5, na.rm=T)+
geom_boxplot(aes(group = f_property_type),
size = 0.5, width = 0.6, alpha = 0.3, na.rm=T, outlier.shape = NA) +
#scale_y_continuous(expand = c(0.01,0.01),limits = c(0,300), breaks = seq(0,300,100)) +
labs(x = "Property type",y = "Price (South-African rand)")
# group variables
target_var <- 'price'
basic_vars <- c('f_property_type', 'f_neighbourhood', 'n_accommodates', 'n_bedrooms', 'n_beds', 'd_instant_bookable', 'n_bathrooms')
host_vars <- c('n_days_since_host', 'n_host_response_rate', 'flag_host_response_rate','n_host_acceptance_rate', 'flag_host_acceptance_rate', 'd_superhost', 'd_profile_pic', 'd_identity_verified', 'n_host_total_listings_count')
reviews <- c(  'n_number_of_reviews', 'flag_number_of_reviews', 'n_days_since_rv', 'flag_days_since_rv', 'n_review_scores_rating', 'flag_review_scores_rating','n_reviews_per_month', 'flag_reviews_per_month')
amenities <- c("d_wifi", "d_tv", "d_refrigerator", "d_air_conditioning", "d_sound", "d_baby", "d_beach", "d_stove", "d_free_parking", "d_paid_parking")
transformed_vars <- c( 'n_beds2', 'ln_bathrooms', 'ln_number_of_reviews', 'n_days_since_rv2', 'n_days_since_host2', 'n_days_since_host3', 'n_host_acceptance_rate2', 'n_host_response_rate2', 'ln_host_total_listings_count', 'n_bedrooms2')
X_for_ols <- c('f_property_type * d_profile_pic', 'f_property_type * d_instant_bookable', 'f_property_type * d_wifi', 'f_property_type * d_tv', 'f_property_type * d_refrigerator', 'f_property_type * d_baby', 'f_property_type * d_beach', 'f_property_type * d_stove', 'f_property_type * d_paid_parking')
X_for_lasso  <- c('f_property_type * d_profile_pic', 'f_property_type * d_identity_verified', 'f_property_type * d_superhost', 'f_property_type * d_instant_bookable', paste0("(f_property_type) * (",                                                                                                                                                                              paste(amenities, collapse=" + "),")"))
predictors_1 <- c(basic_vars)
predictors_2 <- c(basic_vars, host_vars, reviews, amenities)
predictors_3 <- c(basic_vars[1:6], host_vars[1:9], reviews[2:8], amenities, transformed_vars)
predictors_4 <- c(predictors_3, X_for_ols)
predictors_5 <- c(predictors_3, X_for_lasso)
# create holdout set
set.seed(890)
train_indices <- as.integer(createDataPartition(data$price, p = 0.8, list = FALSE))
df_train <- data[train_indices, ]
df_holdout <- data[-train_indices, ]
# set the number of folds for cross-validation
train_control <- trainControl(method = "cv",
number = 5,
verboseIter = FALSE)
# simplest model
set.seed(8)
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
# group variables
target_var <- 'price'
basic_vars <- c('f_property_type', 'f_neighbourhood', 'n_accommodates', 'n_bedrooms', 'n_beds', 'd_instant_bookable', 'n_bathrooms')
host_vars <- c( 'n_host_response_rate', 'flag_host_response_rate','n_host_acceptance_rate', 'flag_host_acceptance_rate', 'd_superhost', 'd_profile_pic', 'd_identity_verified', 'n_host_total_listings_count')
reviews <- c(  'n_number_of_reviews', 'flag_number_of_reviews', 'n_days_since_rv', 'flag_days_since_rv', 'n_review_scores_rating', 'flag_review_scores_rating','n_reviews_per_month', 'flag_reviews_per_month')
amenities <- c('d_wifi', 'd_tv', 'd_refrigerator', 'd_air_conditioning', 'd_microwave', 'd_baby', 'd_stove', 'd_free_parking', 'd_paid_parking')
transformed_vars <- c( 'n_beds2', 'ln_bathrooms', 'ln_number_of_reviews', 'n_days_since_rv2', 'n_host_acceptance_rate2', 'n_host_response_rate2', 'ln_host_total_listings_count', 'n_bedrooms2')
X_for_ols <- c('f_property_type * d_profile_pic', 'f_property_type * d_instant_bookable', 'f_property_type * d_wifi', 'f_property_type * d_tv', 'f_property_type * d_refrigerator', 'f_property_type * d_baby', 'f_property_type * d_microwave', 'f_property_type * d_stove', 'f_property_type * d_paid_parking')
X_for_lasso  <- c('f_property_type * d_profile_pic', 'f_property_type * d_identity_verified', 'f_property_type * d_superhost', 'f_property_type * d_instant_bookable', paste0("(f_property_type) * (",                                                                                                                                                                              paste(amenities, collapse=" + "),")"))
predictors_1 <- c(basic_vars)
predictors_2 <- c(basic_vars, host_vars, reviews, amenities)
predictors_3 <- c(basic_vars[1:6], host_vars[1:9], reviews[2:8], amenities, transformed_vars)
predictors_4 <- c(predictors_3, X_for_ols)
predictors_5 <- c(predictors_3, X_for_lasso)
predictors_1
predictors_2
# create holdout set
set.seed(890)
train_indices <- as.integer(createDataPartition(data$price, p = 0.8, list = FALSE))
df_train <- data[train_indices, ]
df_holdout <- data[-train_indices, ]
# set the number of folds for cross-validation
train_control <- trainControl(method = "cv",
number = 5,
verboseIter = FALSE)
# simplest model
set.seed(8)
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_1, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_1, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
basic_vars[1:6]
predictors_3 <- c(basic_vars[1:6], host_vars[1:9], reviews[2:8], amenities, transformed_vars)
amenities
transformed_vars
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
predictors_3
system.time({
ols_model2 <- train(
formula(price ~ f_property_type+f_neighbourhood+n_accommodates+n_bedrooms+n_beds+d_instant_bookable+n_host_response_rate+flag_host_response_rate+
n_host_acceptance_rate+flag_host_acceptance_rate+d_superhost+d_profile_pic),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs2 <-  ols_model2$finalModel$coefficients
paste0("price ~", paste0(predictors_4, collapse = " + "))
paste0("price ~", paste0(predictors_3, collapse = " + "))
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model2 <- train(
formula(price ~f_property_type + f_neighbourhood + n_accommodates + n_bedrooms + n_beds + d_instant_bookable + n_host_response_rate + flag_host_response_rate + n_host_acceptance_rate + flag_host_acceptance_rate + d_superhost + d_profile_pic + d_identity_verified + n_host_total_listings_count + NA + flag_number_of_reviews + n_days_since_rv + flag_days_since_rv + n_review_scores_rating + flag_review_scores_rating + n_reviews_per_month + flag_reviews_per_month + d_wifi + d_tv + d_refrigerator + d_air_conditioning + d_microwave + d_baby + d_stove + d_free_parking + d_paid_parking + n_beds2 + ln_bathrooms + ln_number_of_reviews + n_days_since_rv2 + n_host_acceptance_rate2 + n_host_response_rate2 + ln_host_total_listings_count + n_bedrooms2),
data = df_train,
method = "lm",
trControl = train_control
)
})
data$ln_host_total_listings_count
predictors_3 <- c(basic_vars, host_vars, reviews, amenities, transformed_vars)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs2 <-  ols_model2$finalModel$coefficients
ols_model_coeffs_df2 <- data.frame(
"variable" = names(ols_model_coeffs2),
"ols_coefficient" = ols_model_coeffs2
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables plus interactions
set.seed(8)
system.time({
ols_model3 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
system.time({
ols_model1 <- train(
formula(paste0("price ~", paste0(predictors_2, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs1 <-  ols_model1$finalModel$coefficients
ols_model_coeffs_df1 <- data.frame(
"variable" = names(ols_model_coeffs1),
"ols_coefficient" = ols_model_coeffs1
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables
set.seed(8)
system.time({
ols_model2 <- train(
formula(paste0("price ~", paste0(predictors_3, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs2 <-  ols_model2$finalModel$coefficients
ols_model_coeffs_df2 <- data.frame(
"variable" = names(ols_model_coeffs2),
"ols_coefficient" = ols_model_coeffs2
) %>%
mutate(variable = gsub("`","",variable))
# model with transformed variables plus interactions
set.seed(8)
system.time({
ols_model3 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
paste0("price ~", paste0(predictors_4, collapse = " + "))
predictors_4 <- c(predictors_3, X_for_ols)
predictors_5 <- c(predictors_3, X_for_lasso)
system.time({
ols_model3 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "lm",
trControl = train_control
)
})
ols_model_coeffs3 <-  ols_model3$finalModel$coefficients
ols_model_coeffs_df3 <- data.frame(
"variable" = names(ols_model_coeffs3),
"ols_coefficient" = ols_model_coeffs3
) %>%
mutate(variable = gsub("`","",variable))
# transformed numeric variables, no interactions
set.seed(8)
system.time({
lasso_model1 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid =  expand.grid("alpha" = 1, "lambda" = seq(0.01, 1, by = 0.05)),
trControl = train_control
)
})
print(lasso_model1$bestTune$lambda)
lasso_coeffs1 <- coef(
lasso_model1$finalModel,
lasso_model1$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `1`)
lasso_coeffs_non_null1 <- lasso_coeffs1[!lasso_coeffs1$lasso_coefficient == 0,]
# transformed numeric variables, no interactions
set.seed(8)
system.time({
lasso_model1 <- train(
formula(paste0("price ~", paste0(predictors_4, collapse = " + "))),
data = df_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneGrid =  expand.grid("alpha" = 1, "lambda" = seq(0.01, 1, by = 0.05)),
trControl = train_control
)
})
print(lasso_model1$bestTune$lambda)
lasso_coeffs1 <- coef(
lasso_model1$finalModel,
lasso_model1$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `1`)
lasso_coeffs1 <- coef(
lasso_model1$finalModel,
lasso_model1$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `0.31`)
lasso_coefficient
lasso_model1$finalModel
lasso_coeffs2 <- coef(
lasso_model2$finalModel,
lasso_model2$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(lasso_coefficient = `1`)
lasso_coeffs_non_null2 <- lasso_coeffs2[!lasso_coeffs1$lasso_coefficient == 0,]
print(nrow(lasso_coeffs_non_null2))
data <- read_csv("~/Desktop/BA-Courses/Data_Analysis3/Assignment2/data/clean/shanghai_clean.csv")
# boxplot of price by property type
ggplot(data = data, aes(x = f_property_type, y = price)) +
stat_boxplot(aes(group = f_property_type), geom = "errorbar", width = 0.3, size = 0.5, na.rm=T)+
geom_boxplot(aes(group = f_property_type),
size = 0.5, width = 0.6, alpha = 0.3, na.rm=T, outlier.shape = NA) +
#scale_y_continuous(expand = c(0.01,0.01),limits = c(0,300), breaks = seq(0,300,100)) +
labs(x = "Property type",y = "Price (South-African rand)")
# boxplot of price by property type
ggplot(data = data, aes(x = f_property_type, y = price)) +
stat_boxplot(aes(group = f_property_type), geom = "errorbar", width = 0.3, size = 0.5, na.rm=T)+
geom_boxplot(aes(group = f_property_type),
size = 0.5, width = 0.6, alpha = 0.3, na.rm=T, outlier.shape = NA) +
#scale_y_continuous(expand = c(0.01,0.01),limits = c(0,300), breaks = seq(0,300,100)) +
labs(x = "Property type",y = "Price")
summary(data$price)
